@page "/users"
@using BlazorApp.Services
@using RMS.Application.DTOs.UserDTOs.OutputDTOs
@using RMS.Domain.Dtos
@using MudBlazor
@inject UserApiClientService UserApiClientService
@inject IDialogService DialogService

<MudText Typo="Typo.h4" GutterBottom="true">User Management</MudText>

<MudTable T="UserDto" ServerData="@LoadUsers" @ref="_table" Dense="true" Hover="true" Striped="true">
    <ToolBarContent>
        <MudText Typo="Typo.h6">Users</MudText>
        <MudSpacer />
        <MudTextField T="string" ValueChanged="@OnSearch" Placeholder="Search" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
        <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="@(() => OpenUserForm(0))">Add User</MudButton>
    </ToolBarContent>
    <HeaderContent>
        <MudTh><MudTableSortLabel T="UserDto" SortBy="x => x.UserID">Id</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel T="UserDto" SortBy="x => x.UserName">Username</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel T="UserDto" SortBy="x => x.FullName">Full Name</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel T="UserDto" SortBy="x => x.Email">Email</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel T="UserDto" SortBy="x => x.Phone">Phone</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel T="UserDto" SortBy="x => x.Status">Status</MudTableSortLabel></MudTh>
        <MudTh>Roles</MudTh>
        <MudTh>Actions</MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel="Id">@context.UserID</MudTd>
        <MudTd DataLabel="Username">@context.UserName</MudTd>
        <MudTd DataLabel="Full Name">@context.FullName</MudTd>
        <MudTd DataLabel="Email">@context.Email</MudTd>
        <MudTd DataLabel="Phone">@context.Phone</MudTd>
        <MudTd DataLabel="Status">@(context.Status ? "Active" : "Inactive")</MudTd>
        <MudTd DataLabel="Roles">@string.Join(", ", context.Roles)</MudTd>
        <MudTd DataLabel="Actions">
            <MudIconButton Icon="@Icons.Material.Filled.Edit" OnClick="@(() => OpenUserForm(context.UserID))" />
            <MudIconButton Icon="@Icons.Material.Filled.Delete" OnClick="@(() => DeleteUser(context.UserID))" />
        </MudTd>
    </RowTemplate>
    <PagerContent>
        <MudTablePager />
    </PagerContent>
</MudTable>

@code {
    private MudTable<UserDto> _table;
    private string _searchString = string.Empty;

    private async Task<TableData<UserDto>> LoadUsers(TableState state, CancellationToken cancellationToken)
    {
        string? sortColumn = state.SortLabel;
        string? sortDirection = state.SortDirection == SortDirection.Ascending ? "asc" : "desc";

        var response = await UserApiClientService.GetAllUsersAsync(state.Page + 1, state.PageSize, _searchString, sortColumn, sortDirection);
        if (response.IsSuccess)
        {
            return new TableData<UserDto>() { TotalItems = response.Data.TotalRecords, Items = response.Data.Items };
        }
        return new TableData<UserDto>() { TotalItems = 0, Items = new List<UserDto>() };
    }

    private void OnSearch(string text)
    {
        _searchString = text;
        _table.ReloadServerData();
    }

    private async Task OpenUserForm(int userId)
    {
        try
        {
            var parameters = new DialogParameters { ["UserId"] = userId };
            var dialog = DialogService.Show<Users.UserForm>("User Form", parameters);
            var result = await dialog.Result;
            if (!result.Canceled)
            {
                await _table.ReloadServerData();
            }
        }
        catch (Exception ex)
        {
            
            throw ex;
        }

    }

    private async Task DeleteUser(int userId)
    {
        var parameters = new DialogParameters();
        parameters.Add("ContentText", "Are you sure you want to delete this user?");
        parameters.Add("ButtonText", "Delete");
        parameters.Add("Color", Color.Error);

        var dialog = DialogService.Show<MudMessageBox>("Confirm Deletion", parameters);
        var result = await dialog.Result;

        if (!result.Canceled)
        {
            var response = await UserApiClientService.DeleteUserAsync(userId);
            if (response.IsSuccess)
            {
                await _table.ReloadServerData();
            }
        }
    }
}
