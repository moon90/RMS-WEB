@inherits LayoutComponentBase

<MudThemeProvider Theme="_theme" IsDarkMode="_isDarkMode" />
<MudPopoverProvider />
<MudDialogProvider />
<MudSnackbarProvider />

@inject IHttpClientFactory HttpClientFactory
@inject NavigationManager NavigationManager
@inject AuthService AuthService
@inject AuthenticationStateProvider AuthProvider
@inject IJSRuntime JSRuntime
@inject ISnackbar Snackbar
@inject RoleApiClientService RoleApiClientService // Inject RoleApiClientService

<MudLayout>
    <!-- Header / AppBar -->
    <MudAppBar Color="Color.Primary" Fixed="true" Elevation="4">
        <MudIconButton Icon="@Icons.Material.Filled.Menu" Color="Color.Inherit" Edge="Edge.Start" OnClick="@((e) => _drawerOpen = !_drawerOpen)" />
        <MudText Typo="Typo.h6" Class="ml-4">RMS</MudText>
        <MudSpacer />

        <MudTextField @bind-Value="searchText" Placeholder="Search..." Variant="Variant.Outlined" Margin="Margin.Dense" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" />

        <MudIconButton Icon="@Icons.Material.Filled.Notifications" Color="Color.Inherit" />

        <MudMenu Label="Open Menu" Color="Color.Secondary" Size="Size.Medium" Variant="Variant.Text">
            <ActivatorContent>
                <MudAvatar>
                    <MudIcon Icon="@Icons.Material.Filled.Person" />
                </MudAvatar>
            </ActivatorContent>
            <ChildContent>
                <MudMenuItem Label="Profile" OnClick="@(() => Console.WriteLine("Profile clicked"))" />
                <MudMenuItem Label="My account" OnClick="@(() => Console.WriteLine("My Account clicked"))" />
                <MudMenuItem Label="Logout" OnClick="@(() => Logout())" />
            </ChildContent>
        </MudMenu>

    </MudAppBar>
    <!-- Sidebar -->
    <MudDrawer @bind-Open="_drawerOpen" ClipMode="DrawerClipMode.Always" Elevation="1" Anchor="Anchor.Left" Variant="DrawerVariant.Persistent">
        <MudNavMenu>
            @if (_authorizedMenus != null)
            {
                @foreach (var menu in _authorizedMenus.OrderBy(m => m.DisplayOrder))
                {
                    @if (menu.ParentID == null) // Top-level menu items
                    {
                        <MudNavLink Href="@menu.MenuPath" Icon="@menu.MenuIcon" Match="NavLinkMatch.Prefix">@menu.MenuName</MudNavLink>

                        @* Render child menus *@
                        @foreach (var childMenu in _authorizedMenus.Where(m => m.ParentID == menu.MenuID).OrderBy(m => m.DisplayOrder))
                        {
                            <MudNavLink Href="@childMenu.MenuPath" Icon="@childMenu.MenuIcon" Match="NavLinkMatch.Prefix" Class="ml-4">@childMenu.MenuName</MudNavLink>
                        }
                    }
                }
            }
        </MudNavMenu>
    </MudDrawer>

    <!-- Main Content -->
    <MudMainContent>

        <!-- Page content -->
        <MudContainer MaxWidth="MaxWidth.False" Class="pa-4">
            @Body
        </MudContainer>
    </MudMainContent>

    <!-- Footer -->
    <MudAppBar Bottom="true" Elevation="1">
        <MudSpacer />
        <MudText Typo="Typo.caption">Â© 2025 My Company</MudText>
        <MudSpacer />
    </MudAppBar>
</MudLayout>

<div id="blazor-error-ui">
    An unhandled error has occurred.
    <a href="" class="reload">Reload</a>
    <a class="dismiss">ðŸ—™</a>
</div>

@using BlazorApp.Services
@using Microsoft.AspNetCore.Components.Authorization
@using MudBlazor.Utilities
@using RMS.Domain.DTOs.RoleMenuDTOs.OutputDTOs // Added for RoleMenuDto

@code {
    private bool _drawerOpen = true;
    private string searchText = string.Empty;
    private bool _isDarkMode = true;
    private MudThemeProvider _mudThemeProvider = new();
    private List<RoleMenuDto>? _authorizedMenus; // To store authorized menus

    private readonly MudTheme _theme = new MudTheme()
    {
        PaletteLight = new PaletteLight()
        {
                Primary = new MudColor("#2980b9"),              // Indigo
                Secondary = new MudColor("#2c3e50"),            // Pink A200
                AppbarBackground = new MudColor("#303F9F"),     // Darker Indigo
            DrawerBackground = new MudColor("#303F9F"),     // Darker Indigo
            Background = new MudColor("#F5F5F5"),           // Light Grey
            AppbarText = new MudColor("#FFFFFF"),
            DrawerText = new MudColor("#FFFFFF"),
            DrawerIcon = new MudColor("#FFFFFF"),
            TextPrimary = new MudColor("#212121"),          // Dark Grey for text
            TextSecondary = new MudColor("#757575"),        // Medium Grey for secondary text
        },
        PaletteDark = new PaletteDark()
        {
                Primary = new MudColor("#2980b9"),              // Light Indigo
                Secondary = new MudColor("#34495e"),            // Light Pink
                AppbarBackground = new MudColor("#212121"),     // Dark Grey
            DrawerBackground = new MudColor("#212121"),     // Dark Grey
            Background = new MudColor("#303030"),           // Darker Grey
            AppbarText = new MudColor("#FFFFFF"),
            DrawerText = new MudColor("#FFFFFF"),
            DrawerIcon = new MudColor("#FFFFFF"),
            TextPrimary = new MudColor("#FFFFFF"),          // White for text
            TextSecondary = new MudColor("#BDBDBD"),        // Light Grey for secondary text
        }
    };


    private bool _hasCheckedAuth = false;

    protected override async Task OnInitializedAsync()
    {
        await LoadAuthorizedMenus();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender && !_hasCheckedAuth)
        {
            _hasCheckedAuth = true;

            try
            {
                var token = await JSRuntime.InvokeAsync<string>("localStorage.getItem", "accessToken");

                if (string.IsNullOrWhiteSpace(token))
                {
                    NavigationManager.NavigateTo("/login", forceLoad: true);
                }
            }
            catch
            {
                // If JSInterop fails (e.g., still prerendering), do nothing.
            }
        }
    }

    private async Task LoadAuthorizedMenus()
    {
        try
        {
            var authState = await AuthProvider.GetAuthenticationStateAsync();
            var user = authState.User;

            if (user.Identity != null && user.Identity.IsAuthenticated)
            {
                // Assuming RoleID is available as a claim or can be retrieved from a service
                // For simplicity, let's assume the user has a "roleid" claim
                var roleIdClaim = user.FindFirst("roleid"); // Adjust claim type if different

                if (roleIdClaim != null && int.TryParse(roleIdClaim.Value, out int roleId))
                {
                    var response = await RoleApiClientService.GetRoleMenusByRoleIdAsync(roleId);
                    if (response.IsSuccess && response.Data != null)
                    {
                        _authorizedMenus = response.Data.Where(m => m.CanView).ToList();
                        StateHasChanged(); // Notify Blazor that the state has changed
                    }
                    else
                    {
                        Snackbar.Add($"Failed to load menus: {response.Message}", Severity.Error);
                    }
                }
                else
                {
                    Snackbar.Add("User role ID not found or invalid.", Severity.Warning);
                }
            }
            else
            {
                // User is not authenticated, clear menus or redirect to login
                _authorizedMenus = new List<RoleMenuDto>();
                NavigationManager.NavigateTo("/login", forceLoad: true);
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error loading menus: {ex.Message}", Severity.Error);
        }
    }

    private async Task Logout()
    {
        try
        {
            // You must get the userId from token/session. Assuming stored in localStorage:
            var userIdStr = await JSRuntime.InvokeAsync<string>("localStorage.getItem", "userId");
            if (int.TryParse(userIdStr, out int userId))
            {
                //var httpClient = HttpClientFactory.CreateClient("RMSApi");
                var response = await AuthService.LogoutAsync(userId);

                if (response.IsSuccess)
                {
                    // Clear tokens from localStorage
                    // await JSRuntime.InvokeVoidAsync("localStorage.removeItem", "accessToken");
                    // await JSRuntime.InvokeVoidAsync("localStorage.removeItem", "refreshToken");
                    // await JSRuntime.InvokeVoidAsync("localStorage.removeItem", "userId");

                    Snackbar.Add("Logged out successfully", Severity.Success);
                    NavigationManager.NavigateTo("/login", forceLoad: true);
                }
                else
                {
                    Snackbar.Add("Logout failed on server.", Severity.Error);
                }
            }
            else
            {
                Snackbar.Add("Invalid user session", Severity.Warning);
                NavigationManager.NavigateTo("/login", forceLoad: true);
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Logout error: {ex.Message}", Severity.Error);
        }
    }

}